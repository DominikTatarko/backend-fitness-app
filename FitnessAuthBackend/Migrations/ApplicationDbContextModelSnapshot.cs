// <auto-generated />
using System;
using FitnessAuthBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessAuthBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FitnessAuthBackend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Difficulty", b =>
                {
                    b.Property<int>("DifficultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DifficultyId"));

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DifficultyId");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            DifficultyId = 1,
                            DifficultyName = "Beginner"
                        },
                        new
                        {
                            DifficultyId = 2,
                            DifficultyName = "Intermediate"
                        },
                        new
                        {
                            DifficultyId = 3,
                            DifficultyName = "Advanced"
                        });
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"));

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InDepthYouTubeExplanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ShortYouTubeDemo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.FitnessProgram", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazovObrProgram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramId");

                    b.ToTable("FitnessPrograms");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<int>("PullUpGoal")
                        .HasColumnType("int");

                    b.Property<int>("PushUpGoal")
                        .HasColumnType("int");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GoalId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Jedlo", b =>
                {
                    b.Property<int>("JedloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JedloId"));

                    b.Property<double>("Bielkoviny")
                        .HasColumnType("float");

                    b.Property<double>("Kalorie")
                        .HasColumnType("float");

                    b.Property<string>("NazovJedla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazovObrJedlo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Sacharidy")
                        .HasColumnType("float");

                    b.Property<double>("Tuky")
                        .HasColumnType("float");

                    b.Property<int>("TypJedlaId")
                        .HasColumnType("int");

                    b.HasKey("JedloId");

                    b.HasIndex("TypJedlaId");

                    b.ToTable("Jedla");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Krok", b =>
                {
                    b.Property<int>("KrokId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KrokId"));

                    b.Property<int>("CisloKroku")
                        .HasColumnType("int");

                    b.Property<int>("JedloId")
                        .HasColumnType("int");

                    b.Property<string>("PopisKroku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KrokId");

                    b.HasIndex("JedloId");

                    b.ToTable("Kroky");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.MuscleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MuscleGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MuscleGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MuscleGroupName = "Abdominals"
                        },
                        new
                        {
                            Id = 2,
                            MuscleGroupName = "Shoulders"
                        },
                        new
                        {
                            Id = 3,
                            MuscleGroupName = "Chest"
                        },
                        new
                        {
                            Id = 4,
                            MuscleGroupName = "Back"
                        },
                        new
                        {
                            Id = 5,
                            MuscleGroupName = "Biceps"
                        },
                        new
                        {
                            Id = 6,
                            MuscleGroupName = "Glutes"
                        },
                        new
                        {
                            Id = 7,
                            MuscleGroupName = "Quadriceps"
                        },
                        new
                        {
                            Id = 8,
                            MuscleGroupName = "Calves"
                        },
                        new
                        {
                            Id = 9,
                            MuscleGroupName = "Triceps"
                        },
                        new
                        {
                            Id = 10,
                            MuscleGroupName = "Forearms"
                        },
                        new
                        {
                            Id = 11,
                            MuscleGroupName = "Hamstrings"
                        },
                        new
                        {
                            Id = 12,
                            MuscleGroupName = "Trapezius"
                        },
                        new
                        {
                            Id = 13,
                            MuscleGroupName = "Adductors"
                        },
                        new
                        {
                            Id = 14,
                            MuscleGroupName = "Abductors"
                        },
                        new
                        {
                            Id = 15,
                            MuscleGroupName = "Shins"
                        },
                        new
                        {
                            Id = 16,
                            MuscleGroupName = "Hip Flexors"
                        });
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Performance", b =>
                {
                    b.Property<int>("PerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PullUpCount")
                        .HasColumnType("int");

                    b.Property<int>("PushUpCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerformanceId");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.ProgramWorkout", b =>
                {
                    b.Property<int>("ProgramWorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramWorkoutId"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseOrder")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Reps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.HasKey("ProgramWorkoutId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramWorkouts");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.TypJedla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypJedlaNazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypyJedla");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypJedlaNazov = "Raňajky"
                        },
                        new
                        {
                            Id = 2,
                            TypJedlaNazov = "Obed"
                        },
                        new
                        {
                            Id = 3,
                            TypJedlaNazov = "Večera"
                        },
                        new
                        {
                            Id = 4,
                            TypJedlaNazov = "Olovarant"
                        });
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.UserExercise", b =>
                {
                    b.Property<int>("UserExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserExerciseId"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Reps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<int>("UserWorkoutId")
                        .HasColumnType("int");

                    b.HasKey("UserExerciseId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserWorkoutId");

                    b.ToTable("UserExercises");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.UserWorkout", b =>
                {
                    b.Property<int>("UserWorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserWorkoutId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProgramWorkoutId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkoutName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserWorkoutId");

                    b.HasIndex("ProgramWorkoutId");

                    b.ToTable("UserWorkout");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Exercise", b =>
                {
                    b.HasOne("FitnessAuthBackend.Models.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitnessAuthBackend.Models.MuscleGroup", "MuscleGroup")
                        .WithMany()
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Jedlo", b =>
                {
                    b.HasOne("FitnessAuthBackend.Models.TypJedla", "TypJedla")
                        .WithMany("Jedla")
                        .HasForeignKey("TypJedlaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypJedla");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Krok", b =>
                {
                    b.HasOne("FitnessAuthBackend.Models.Jedlo", "Jedlo")
                        .WithMany("Kroky")
                        .HasForeignKey("JedloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jedlo");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.ProgramWorkout", b =>
                {
                    b.HasOne("FitnessAuthBackend.Models.Exercise", "Exercise")
                        .WithMany("ProgramWorkouts")
                        .HasForeignKey("ExerciseId");

                    b.HasOne("FitnessAuthBackend.Models.FitnessProgram", "Program")
                        .WithMany("ProgramWorkouts")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.UserExercise", b =>
                {
                    b.HasOne("FitnessAuthBackend.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessAuthBackend.Models.UserWorkout", "UserWorkout")
                        .WithMany("UserExercises")
                        .HasForeignKey("UserWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("UserWorkout");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.UserWorkout", b =>
                {
                    b.HasOne("FitnessAuthBackend.Models.ProgramWorkout", null)
                        .WithMany("UserWorkouts")
                        .HasForeignKey("ProgramWorkoutId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitnessAuthBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitnessAuthBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessAuthBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitnessAuthBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Exercise", b =>
                {
                    b.Navigation("ProgramWorkouts");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.FitnessProgram", b =>
                {
                    b.Navigation("ProgramWorkouts");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.Jedlo", b =>
                {
                    b.Navigation("Kroky");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.ProgramWorkout", b =>
                {
                    b.Navigation("UserWorkouts");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.TypJedla", b =>
                {
                    b.Navigation("Jedla");
                });

            modelBuilder.Entity("FitnessAuthBackend.Models.UserWorkout", b =>
                {
                    b.Navigation("UserExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
